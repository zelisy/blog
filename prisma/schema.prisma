generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  posts     Post[]
  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
  blogs     Blog[]
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  createdAt   DateTime @default(now())
  isApproved  Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  Int
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  imageUrl  String?
  featured  Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  isApproved Boolean @default(false)
  views     Int      @default(0)
  comments  Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  authorName String
  authorEmail String
  createdAt DateTime @default(now())
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    Int
  isApproved Boolean @default(true)
}



enum Role {
  USER
  ADMIN
}
